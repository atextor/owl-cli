/*
 * Copyright 2021 Andreas Textor
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.46.0'
    id 'com.adarshr.test-logger' version '3.2.0' apply false
    id 'io.freefair.lombok' version '8.0.1' apply false
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'org.ajoberstar.grgit' version '5.0.0'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

def currentTag = {
    def grgit = grgit.open{ dir = "${projectDir}" }
    def tag = grgit.describe{ tags = true }
    if (tag != null) {
        tag.startsWith('snapshot') ? 'snapshot' : tag.replace('v', '')
    } else {
        'snapshot'
    }
}

subprojects {
    version = currentTag()
    task allDeps(type: DependencyReportTask) {}
    ext {
        homeDir = System.getProperty("user.home")
        lombokAnnotationProcessor = 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
        lombokClaimingProcessor = 'lombok.launch.AnnotationProcessorHider$ClaimingProcessor'
        picocliProcessor = 'picocli.codegen.aot.graalvm.processor.NativeImageConfigGeneratorProcessor'
    }
}

apply plugin: 'jacoco'
apply plugin: 'java'

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    classDirectories.from = [
        "${projectDir}/cli/build/classes/java/main",
        "${projectDir}/diagram/build/classes/java/main",
        "${projectDir}/write/build/classes/java/main",
        "${projectDir}/infer/build/classes/java/main",
    ]
    sourceDirectories.from = [
        "${projectDir}/cli/src/main/java",
        "${projectDir}/diagram/src/main/java",
        "${projectDir}/write/src/main/java",
        "${projectDir}/infer/src/main/java",
    ]

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    reports {
        html.required = true
        xml.required = true
        xml.destination(file("${buildDir}/reports/jacoco/report.xml"))
        csv.required = false
    }

    dependsOn ':test'
    dependsOn ':cli:test'
    dependsOn ':diagram:test'
    dependsOn ':write:test'
    dependsOn ':infer:test'
}

defaultTasks 'test', 'shadowJar'

def isNonStable = { String version ->
    return ['ALPHA', 'BETA', 'RC', 'M'].any { it -> version.toUpperCase().contains(it) }
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
