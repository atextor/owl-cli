plugins {
    id 'com.github.node-gradle.node' version '3.0.1'
}

apply from: file("${rootDir}/dependencies.gradle")
node {
    version = deps.nodejs
    npmVersion = deps.npm
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
    nodeModulesDir = file("${project.buildDir}")
}

task installAntoraCli(type: NpmTask) {
    args = ['install', '@antora/cli']
    outputs.file file("${project.buildDir}/node_modules/@antora/cli/bin/antora")
}

task installAntoraSiteGeneratorLunr(type: NpmTask) {
    args = ['install', 'antora-site-generator-lunr']
    outputs.file file("${project.buildDir}/node_modules/antora-site-generator-lunr/lib/index.js")
}

task installAsciidoctorMathjax(type: NpmTask) {
    args = ['install', '@djencks/asciidoctor-mathjax']
    outputs.file file("${project.buildDir}/node_modules/@djencks/asciidoctor-mathjax/lib/asciidoctor-mathjax.js")
}

task setAntoraVersion(type: Copy) {
    ant.replaceregexp(match:'version: .*', replace:"version: ${version}", flags:'g', byline:true) {
        fileset(dir: "${project.projectDir}", includes: 'antora.yml')
    }
}

task generateImages() {
}

task antora(type: NodeTask) {
    dependsOn 'installAntoraCli'
    dependsOn 'installAntoraSiteGeneratorLunr'
    dependsOn 'installAsciidoctorMathjax'
    dependsOn 'setAntoraVersion'
    dependsOn 'generateImages'
    environment = [
        'DOCSEARCH_ENABLED': 'true',
        'DOCSEARCH_ENGINE': 'lunr'
    ]
    workingDir = rootProject.projectDir
    script = file("${project.buildDir}/node_modules/@antora/cli/bin/antora")
    args = ['--generator', 'antora-site-generator-lunr', 'site.yml', '--stacktrace']
}

def ontologyDir = 'modules/ROOT/examples'
project.fileTree(dir: ontologyDir, include: '*.ttl').files.each { ttlFile ->
    def baseName = ttlFile.name.replaceFirst("[.][^.]+\$", "")
    def imageFile = "${project.projectDir}/modules/ROOT/assets/images/${baseName}.svg"
    def diagramArgs = ttlFile.getText().contains("top_to_bottom") ?
        ['diagram', '--direction', 'top_to_bottom', "${baseName}.ttl", imageFile] :
        ['diagram', "${baseName}.ttl", imageFile]
    def command = [project(':cli').file('build/bin/owl').getCanonicalPath()] + diagramArgs
    tasks.create(name: "${baseName}", type: Exec, dependsOn: ":cli:nativeImagePass2") {
        commandLine command
        workingDir = file("${project.projectDir}/${ontologyDir}")
        inputs.file file(ttlFile)
        outputs.file file(imageFile)
    }
    generateImages.dependsOn("${baseName}")
}
