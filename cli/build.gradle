plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow'
    id 'io.franzbecker.gradle-lombok'
    id 'com.adarshr.test-logger'
}

repositories {
    maven { url 'https://jitpack.io' }
}

apply from: file("${rootDir}/dependencies.gradle")
dependencies {
    implementation project(':diagram')
    implementation(deps.owlapi) {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    implementation(deps.vavr)
    implementation(deps.picocli)
    implementation(deps.logback)
    annotationProcessor(deps.picocli_codegen)
    annotationProcessor(deps.jabel)

    // Override transitive dependency versions due to features
    implementation(deps.caffeine)

    // Override transitive dependency versions due to vulns
    implementation(deps.guava)
    implementation(deps.jackson_databind)
    implementation(deps.rdf4j_util)
    implementation(deps.rdf4j_rio_rdfxml)
    implementation(deps.rdf4j_rio_trix)
    implementation(deps.httpclient)
    implementation(deps.commons_codec)

    // Test
    testImplementation(deps.junit_jupiter_api)
    testImplementation(deps.junit_jupiter_params)
    testImplementation(deps.commons_io)
    testImplementation(deps.assertj)
    testImplementation(deps.classgraph)
    testRuntimeOnly(deps.junit_jupiter_engine)
}

shadowJar {
    archiveBaseName = 'owl-cli'
    archiveClassifier = null
}

def nativeImageCommandLine = ['native-image',
      "-H:ConfigurationFileDirectories=${project.projectDir}/native-image,${buildDir}/classes/java/main/META-INF/native-image/picocli-generated/owl-cli/cli",
      '--initialize-at-build-time=uk.ac.manchester.cs.owl.owlapi.OWLOntologyManagerImpl',
      '--initialize-at-build-time=org.slf4j.impl.SimpleLogger',
      '--initialize-at-build-time=org.slf4j.LoggerFactory',
      '--initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder',
      '--initialize-at-build-time=ch.qos.logback.core.util.Loader',
      '--initialize-at-build-time=ch.qos.logback.classic.Level',
      '--initialize-at-build-time=ch.qos.logback.classic.Logger',
      '--initialize-at-build-time=ch.qos.logback.core.status.InfoStatus',
      '--initialize-at-build-time=ch.qos.logback.core.status.StatusBase',
      '--initialize-at-build-time=ch.qos.logback.core.spi.AppenderAttachableImpl',
      '-H:+TraceClassInitialization',
      '-H:+TraceServiceLoaderFeature',
      '-H:-UseServiceLoaderFeature',
      '-H:+AllowIncompleteClasspath',
      '--no-fallback',
      '--report-unsupported-elements-at-runtime',
      '-jar', "${buildDir}/libs/owl-cli-${version}.jar",
      "${buildDir}/bin/owl"]
task nativeImage(type: Exec, dependsOn: "shadowJar") {
    doFirst {
        println nativeImageCommandLine.join(' ')
    }
    commandLine nativeImageCommandLine
    inputs.file file("${buildDir}/libs/owl-cli-${version}.jar")
    outputs.file file("${buildDir}/bin/owl")
}

task nativeImagePass2(type: Exec, dependsOn: "nativeImage") {
    doFirst {
        println nativeImageCommandLine.join(' ')
    }
    commandLine nativeImageCommandLine
    inputs.file file("${buildDir}/libs/owl-cli-${version}.jar")
    outputs.file file("${buildDir}/bin/owl")
}

def appConfigClass = "OWLCLIConfig"
def genSrc = "${project.projectDir}/src/generated/java"
def genPackage = "${genSrc}/de/atextor/owlcli"
def genAppConfig = "${genPackage}/${appConfigClass}.java"
task generateStaticProperties() {
    doLast {
        file("${genPackage}").mkdirs()
        file("${genAppConfig}").text = """/* Generated file, do not change */
package de.atextor.owlcli;

public class ${appConfigClass} {
    public static final String VERSION = "${version}";
    public static final String BUILD_DATE = "${new Date().format("yyyy-MM-dd HH:mm:ss")}";
}
"""
    }
    outputs.file file("${genAppConfig}")
}

sourceSets {
    generated {
        java.srcDir "${genSrc}"
    }
    main {
        compileClasspath += generated.output
    }
}

compileJava {
    options.fork = true
    options.forkOptions.javaHome = file("${homeDir}/.sdkman/candidates/java/13.0.2-open")
    options.compilerArgs += ["--release", "11", "-processor", "${jabelAnnotationProcessor},${lombokAnnotationProcessor},${lombokClaimingProcessor},${picocliProcessor}"]
    sourceCompatibility = 13
    targetCompatibility = 11
    dependsOn(generateStaticProperties)
}

compileTestJava {
    options.compilerArgs += ["--release", "11"]
    sourceCompatibility = 13
    targetCompatibility = 11
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
    ignoreFailures = false
    failFast = true

    filter {
        includeTestsMatching "*Test"
    }
}

mainClassName = 'de.atextor.owlcli.OWLCLI'
