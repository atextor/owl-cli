/*
 * Copyright 2021 Andreas Textor
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow'
    id 'io.freefair.lombok'
    id 'com.adarshr.test-logger'
}

repositories {
    maven { url 'https://jitpack.io' }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

apply from: file("${rootDir}/dependencies.gradle")
dependencies {
    implementation project(':diagram')
    implementation project(':write')
    implementation project(':infer')
    implementation(deps.owlapi) {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    implementation(deps.jena_core)
    implementation(deps.jena_arq)
    implementation(deps.turtle_formatter)
    implementation(deps.vavr)
    implementation(deps.picocli)
    implementation(deps.logback)
    annotationProcessor(deps.picocli_codegen)

    // Override transitive dependency versions due to features
    implementation(deps.caffeine)

    // Override transitive dependency versions due to vulns
    implementation(deps.guava)
    implementation(deps.jackson_databind)
    implementation(deps.httpclient)
    implementation(deps.commons_codec)

    // To support GraalVM substitution classes
    compileOnly(deps.svm)

    // Test
    testImplementation(deps.junit_jupiter_api)
    testImplementation(deps.junit_jupiter_params)
    testImplementation(deps.commons_io)
    testImplementation(deps.assertj)
    testImplementation(deps.classgraph)
    testRuntimeOnly(deps.junit_jupiter_engine)

    // Integration test
    integrationTestImplementation(deps.junit_jupiter_api)
    integrationTestImplementation(deps.junit_jupiter_params)
    integrationTestImplementation(deps.assertj)
    integrationTestImplementation(deps.classgraph)
    integrationTestRuntimeOnly(deps.junit_jupiter_engine)
}

configurations.all {
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-model"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-api"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-languages"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-datatypes"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-binary"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-n3"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-nquads"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-ntriples"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-rdfjson"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-jsonld"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-rdfxml"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-trix"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-trig"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-rio-turtle"
    exclude group: "org.eclipse.rdf4j", module: "rdf4j-util"
}

shadowJar {
    archiveBaseName = 'owl-cli'
    archiveClassifier = null
}

def nativeImageBinary = Os.isFamily(Os.FAMILY_WINDOWS) ? file("${homeDir}/.sdkman/candidates/java/current/lib/svm/bin/native-image") : file("${homeDir}/.sdkman/candidates/java/22.3.1.r17-grl/lib/svm/bin/native-image")
def nativeImageArgs = ['--verbose', '-jar', "${buildDir}/libs/owl-cli-${version}.jar", "${buildDir}/bin/owl"]
task nativeImage(type: Exec, dependsOn: "shadowJar") {
    doFirst {
        println nativeImageArgs.join(' ')
    }
    executable nativeImageBinary
    args nativeImageArgs
    inputs.file file("${buildDir}/libs/owl-cli-${version}.jar")
    outputs.file file("${buildDir}/bin/owl")
}

def appConfigClass = "OWLCLIConfig"
def genSrc = "${project.projectDir}/src/generated/java"
def genPackage = "${genSrc}/de/atextor/owlcli"
def genAppConfig = "${genPackage}/${appConfigClass}.java"
task generateStaticProperties() {
    doLast {
        file("${genPackage}").mkdirs()
        file("${genAppConfig}").text = """/* Generated file, do not change */
package de.atextor.owlcli;

public class ${appConfigClass} {
    public static final String VERSION = "${version}";
    public static final String BUILD_DATE = "${new Date().format("yyyy-MM-dd HH:mm:ss")}";
}
"""
    }
}

tasks.register("integrationTest", Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    outputs.upToDateWhen { false }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn shadowJar
    shouldRunAfter nativeImage
    onlyIf { project(':cli').file('build/bin/owl').exists() }

    testLogging {
        showStandardStreams = true
    }
}

sourceSets {
    generated {
        java.srcDir "${genSrc}"
    }
    main {
        compileClasspath += sourceSets.generated.output
    }
    integrationTest {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

compileJava {
    sourceCompatibility = 17
    targetCompatibility = 17
    dependsOn(generateStaticProperties)
}

compileTestJava {
    sourceCompatibility = 17
    targetCompatibility = 17
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
    ignoreFailures = false
    failFast = true

    filter {
        includeTestsMatching "*Test"
    }

    testLogging {
        showStandardStreams = true
    }
}

integrationTest {
    useJUnitPlatform()
    maxHeapSize = '1G'
    ignoreFailures = false
    failFast = true

    filter {
        includeTestsMatching "*Test"
    }

    testLogging {
        showStandardStreams = true
    }

    systemProperty "owlBinary", project(':cli').file('build/bin/owl').getCanonicalPath()
}

mainClassName = 'de.atextor.owlcli.OWLCLI'
